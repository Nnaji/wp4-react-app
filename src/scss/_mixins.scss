@mixin clearfix {
    *zoom: 1;
    &:before,
    &:after {
        content: ' ';
        display: table;
    }
    &:after {
        clear: both;
    }
}
@mixin mq($width) {
    @media (min-width: $width) {
        @content;
    }
}
@mixin mqa($width) {
    @media (min-width: $width) {
        max-width: calc($width + 12rem);
        @content;
    }
}
@mixin makegrid($colsize: 12, $mq: sm) {
    @for $i from 1 through $colsize {
        .col-#{$mq}-#{$i} {
            width: calc((100% / $colsize) * $i);
            float: left;
        }
    }
}

@mixin bgimg($height: 100vh) {
    padding-top: 20px;
    background-image: linear-gradient(
            to bottom,
            rgba($black, 0),
            rgba($black, 0.7)
        ),
        url($img-url);
    background-repeat: no-repeat;
    background-position: 50% 0;
    background-size: cover;
    background: url($img-url);
    height: $height;
}
@mixin bgi($img-url, $height: 100vh) {
    padding-top: 20px;
    background-image: linear-gradient(
            to bottom,
            rgba($black, 0),
            rgba($black, 0.7)
        ),
        url($img-url);

    background-repeat: no-repeat;
    background-position: 50% center;
    background-size: cover;
    height: $height;
}

@mixin bgimage($img-url, $height: 100vh) {
    padding-top: 20px;
    background-image: linear-gradient(
            // to bottom,
            360deg,
            rgba($default-color, 0),
            rgba($secondary-color, 0),
            rgba($base-color, 0.5),
            rgba($primary-color, 0.5)
        ),
        url($img-url);

    background-repeat: no-repeat;
    background-position: 50% 0;
    background-size: cover;
    height: $height;
}
@mixin pd-tb($top: null, $bottom: null) {
    padding-top: $top;
    padding-bottom: $bottom;
}
@mixin pd-rl($left, $right) {
    @if $left != null {
        padding-left: $left;
    }
    @if $left != null {
        padding-right: $right;
    }
}
@mixin pd($top, $right, $bottom, $left) {
    @if $top != null {
        padding-top: $top;
    }
    @if $right != null {
        padding-right: $right;
    }
    @if $bottom != null {
        padding-bottom: $bottom;
    }
    @if $left != null {
        padding-left: $left;
    }
}

%sh-ff {
    font-family: $sub-header;
}
%pd-tb {
    @include pd(15px, 0, 15px, 0);
}
%ta-c {
    text-align: center;
}
%ta-l {
    text-align: left;
}

%ta-r {
    text-align: right;
}

%fdefault {
    font-weight: 400;
    line-height: 1.5;
    margin: 1.5rem 0 0.69rem;
    color: $primary-color;
    @include mq($mobile-s-dw) {
        margin: 3rem 0 1.38rem;
    }
}

//- Mixin: Fluid Type
///
/// Magic calc + vh to allow text to be fluid between minimum
/// and maximum breakpoints.
///
/// @group typography
/// @param {variable} $min-font-size [12px] - Minimum font size
/// @param {variable} $max-font-size [24px] - Maximum font size
/// @param {variable} $lower-range [420px] - Stop scaling font smaller at this screen resolution
/// @param {variable} $upper-range [900px] - Stop scaling font larger at this screen resolution
/// @example
///   h1 {
///     @include responsive-type(20px, 48px);
///   }
/// @site https://madebymike.com.au/writing/precise-control-responsive-typography/
// @mixin fluid-type($min-font-size: 12px, $max-font-size: 21px, $lower-range: 420px, $upper-range: 900px) {

@mixin fluid-type($min-font-size, $max-font-size, $lower-range, $upper-range) {
    font-size: calc(
        #{$min-font-size} + #{(
                ($max-font-size / ($max-font-size * 0 + 1)) -
                    ($min-font-size / ($min-font-size * 0 + 1))
            )} * ((100vw - #{$lower-range}) / #{(
                        ($upper-range / ($upper-range * 0 + 1)) -
                            ($lower-range / ($lower-range * 0 + 1))
                    )})
    );

    @media screen and (max-width: $lower-range) {
        font-size: $min-font-size;
    }
    @media screen and (min-width: $upper-range) {
        font-size: $max-font-size;
    }
}

// Change scale

// $mod_1: 1.067;
// $mod_2: 1.333;

// Calculate Modular Scale
// You don't need to calculate this with Sass
// You can use values from http://type-scale.com/
// Or random values :)

// $h1-min: $mod_1 * $mod_1 * $mod_1 * $mod_1 * 1rem;
// $h1-max: $mod_2 * $mod_2 * $mod_2 * $mod_2 * 1rem;
//
// $h2-min: $mod_1 * $mod_1 * $mod_1 * 1rem;
// $h2-max: $mod_2 * $mod_2 * $mod_2 * 1rem;
//
// $h3-min: $mod_1 * $mod_1 * 1rem;
// $h3-max: $mod_2 * $mod_2 * 1rem;
//
// $h4-min: $mod_1 * 1rem;
// $h4-max: $mod_2 * 1rem;
//
// $h5-min: 1rem;
// $h5-max: 1rem;
//
// $h6-min: (1rem / $mod_1);
// $h6-max: (1rem / $mod_2);

// Apply fluid type mixin

// .mod_scale_fluid {
// h1 {
// @include fluid-type(font-size, 37.5rem, 80rem, $h1-min, $h1-max);
// }
//
// h2 {
// @include fluid-type(font-size, 37.5rem, 80rem, $h2-min, $h2-max);
// }
//
// h3 {
// @include fluid-type(font-size, 37.5rem, 80rem, $h3-min, $h3-max);
// }
//
// h4 {
// @include fluid-type(font-size, 37.5rem, 80rem, $h4-min, $h4-max);
// }
//
// h5 {
// @include fluid-type(font-size, 37.5rem, 80rem, $h5-min, $h5-max);
// }
//
// h6 {
// @include fluid-type(font-size, 37.5rem, 80rem, $h6-min, $h6-max);
// }
// }

// h1,h2,h3,h4,h5,h6 { padding: 0; margin: 0.5rem 0; line-height: 1.5;}

//
// p {
// @include fluid-type(14px, 20px);
// font-weight: normal
// }
//
// h1 {
// @include fluid-type(28px, 52px);
// font-weight: 100;
// }
//
//
//
//
//
//
//
// body {
// font-family: 'Roboto', sans-serif;
// padding: 5%;
// }
// h1 {
// margin: 0;
// }
